apply plugin: 'assembler'
apply plugin: 'c'

/*
INITIALISATION      0x00000001
SHELL               0x00000002
TIMER               0x00000004
INTC                0x00000008
MEMORY              0x00000010
COLLECTIONS         0x00000020
PROCESS             0x00000040
SCHEDULING          0x00000080
SCHEDULING_TRACE    0x00000100
SHM                 0x00000200
TARGET              0x00000400
SYSCALL             0x00000800
ALARM               0x00001000
REGISTRY            0x00002000
PIPE                0x00004000
PIPE_TRACE          0x00008000
IDLE                0x00010000
ELF_LOADER          0x00020000
*/

allprojects {
	model {
	    buildTypes {
	        debug
	        release
	    }
	    binaries {
	    	all {
		    	cCompiler.args "-pedantic",
		            "-pedantic-errors",
		            "-Wall",
		            "-Wextra",
		            "-Werror",
		            "-c",
		            "-fmessage-length=0",
		            "-std=gnu11",
		            "-DBUILDING_KERNEL",
		            "-DKERNEL_DEBUGGING",
                    //"-DDEBUG_VALUE=0x0"
                    //"-DDEBUG_VALUE=0x3"
                    //"-DDEBUG_VALUE=0x20841"
                    "-DDEBUG_VALUE=0xFFFFFFFFu"
		        linker.args  "-static"
		        if (buildType == buildTypes.debug) {
		            cCompiler.args "-Og", 
		                "-g3",
		                "-gdwarf-4",
		                "-DKERNEL_SHELL"
                        "-DKERNEL_SHELL_DEBUG"
		                "-UUNIT_TESTS"
		        } else if (buildType == buildTypes.release) {
		            cCompiler.args "-O2",
		                "-g0",
		                "-UKERNEL_DEBUGGING",
		                "-DKERNEL_SHELL",
		                "-UKERNEL_SHELL_DEBUG"
		            linker.args "-s"
			    }
	    	}
	    }
	    toolChains {
	        gcc(Gcc) {
	           target("windows_x86") {
	               File srcDir = new File("src")
	               cCompiler.withArguments { args ->
	                   args << "-Wno-maybe-uninitialized"
	                   args << "-Wno-pointer-to-int-cast"
	                   args << "-Wno-int-to-pointer-cast"
	                   args << "-Wno-type-limits"
	                   args << "-D__i386__"
                       args << "-DUNIT_TESTS"
	                   args << "-DIS_HOST_UNIT_TEST"
                       args << "-DSCHEDULER_DEBUGGING"
                       args << "-DKERNEL_DEBUGGING"
                       args << "-DMEMSET"
                       args << "-ftest-coverage"
                       args << "-fprofile-arcs"
	                   args << "-I" + projectDir + "/../hostTestDriver/src/hostTestDriver/headers"
	               }
	               linker.withArguments { args ->
	                   args << "-ftest-coverage"
	                   args << "-fprofile-arcs"
	               }
	           }
	           target("linux_x86-64") {
	               File srcDir = new File("src")
	               cCompiler.withArguments { args ->
	                   args << "-Wno-maybe-uninitialized"
	                   args << "-Wno-pointer-to-int-cast"
	                   args << "-Wno-int-to-pointer-cast"
	                   args << "-Wno-type-limits"
	                   args << "-D__i386__"
	                   args << "-DUSE_DL_PREFIX"
		               args << "-fPIC"
                       args << "-DUNIT_TESTS"
	                   args << "-DIS_HOST_UNIT_TEST"
                       args << "-DSCHEDULER_DEBUGGING"
                       args << "-DKERNEL_DEBUGGING"
                       args << "-DMEMSET"
                       args << "-ftest-coverage"
                       args << "-fprofile-arcs"
	                   args << "-I" + projectDir + "/../hostTestDriver/src/hostTestDriver/headers"
	               }
	               linker.withArguments { args ->
	                   args << "-ftest-coverage"
	                   args << "-fprofile-arcs"
                       args << "-fPIC"
	               }
	           }
	           target("linux_arm-v7") {
	               File srcDir = new File("src")
                   cCompiler.withArguments { args ->
                       args << "-w"
                       args << "-D__arm__"
                       args << "-DUSE_DL_PREFIX"
                       args << "-fPIC"
                       args << "-DUNIT_TESTS"
                       args << "-DIS_HOST_UNIT_TEST"
                       args << "-DSCHEDULER_DEBUGGING"
                       args << "-DKERNEL_DEBUGGING"
                       args << "-DMEMSET"
                       args << "-ftest-coverage"
                       args << "-fprofile-arcs"
                       args << "-I" + projectDir + "/../hostTestDriver/src/hostTestDriver/headers"
                   }
                   linker.withArguments { args ->
                       args << "-ftest-coverage"
                       args << "-fprofile-arcs"
                       args << "-fPIC"
                   }
	           }
	        }
	        xgcc(Gcc) {
	            target("tinkerPpc") {
	                File srcDir = new File("src")
	                cppCompiler.executable = "powerpc-eabi-gcc"
	                cCompiler.executable = "powerpc-eabi-gcc"
	                assembler.executable = "powerpc-eabi-gcc"
	                linker.executable = "powerpc-eabi-gcc"
	                staticLibArchiver.executable = "powerpc-eabi-ar"
	                cCompiler.withArguments { args ->
	                    args << "-I" + projectDir + "/../archPowerPc/src/archPowerPc/headers"
	                    args << "-mcpu=powerpc"
	                    args << "-Wno-maybe-uninitialized"
	                    args << "-fpic"
	                    args << "-fno-builtin"
		            	args << "-ffreestanding"
	                }
	                linker.withArguments { args ->
	                	args << "-nostartfiles"
			       		args << "-nodefaultlibs"
			        	args << "-nostdlib"
	                }
	            }
	            target("tinkerArm") {
	                File srcDir = new File("src")
	                cppCompiler.executable = "arm-eabi-gcc"
	                cCompiler.executable = "arm-eabi-gcc"
	                assembler.executable = "arm-eabi-gcc"
	                linker.executable = "arm-eabi-gcc"
	                staticLibArchiver.executable = "arm-eabi-ar"
	            }
	            target("tinkerArm4Soft") {
	                File srcDir = new File("src")
	                cppCompiler.executable = "arm-eabi-gcc"
	                cCompiler.executable = "arm-eabi-gcc"
	                assembler.executable = "arm-eabi-gcc"
	                linker.executable = "arm-eabi-gcc"
	                staticLibArchiver.executable = "arm-eabi-ar"
	                cCompiler.withArguments { args ->
	                	args << "-I" + projectDir + "/../archArm/src/archArm/headers"
	                    args << "-I" + projectDir + "/../archArm/src/archArm/headers/arm5"
	                    args << "-marm"
                        args << "-D__arm__"
						args << "-march=armv5"
	                    args << "-fpic"
	                    args << "-fno-builtin"
		            	args << "-ffreestanding"
	                }
	                linker.withArguments { args ->
	                	args << "-nostartfiles"
			       		args << "-nodefaultlibs"
			        	args << "-nostdlib"
	                }
	            }
	            target("tinkerArm4HardVfp") {
	                File srcDir = new File("src")
	                cppCompiler.executable = "arm-eabi-gcc"
	                cCompiler.executable = "arm-eabi-gcc"
	                assembler.executable = "arm-eabi-gcc"
	                linker.executable = "arm-eabi-gcc"
	                staticLibArchiver.executable = "arm-eabi-ar"
	                cCompiler.withArguments { args ->
	                	args << "-I" + projectDir + "/../archArm/src/archArm/headers"
	                    args << "-I" + projectDir + "/../archArm/src/archArm/headers/arm5"
	                    args << "-marm"
                        args << "-D__arm__"
	                    args << "-mfpu=vfp"
	                    args << "-mfloat-abi=hard"
						args << "-march=armv5"
	                    args << "-fpic"
	                    args << "-fno-builtin"
		            	args << "-ffreestanding"
	                }
	                linker.withArguments { args ->
	                	args << "-mfpu=vfp"
	                    args << "-mfloat-abi=hard"
						args << "-march=armv5"
	                    args << "-fpic"
	                	args << "-nostartfiles"
			       		args << "-nodefaultlibs"
			        	args << "-nostdlib"
	                }
	            }
				target("tinkerArm7Soft") {
	                File srcDir = new File("src")
	                cppCompiler.executable = "arm-eabi-gcc"
	                cCompiler.executable = "arm-eabi-gcc"
	                assembler.executable = "arm-eabi-gcc"
	                linker.executable = "arm-eabi-gcc"
	                staticLibArchiver.executable = "arm-eabi-ar"
	                cCompiler.withArguments { args ->
	                	args << "-I" + projectDir + "/../archArm/src/archArm/headers"
	                    args << "-I" + projectDir + "/../archArm/src/archArm/headers/arm7"
                        args << "-D__arm__"
						args << "-march=armv7-a"
	                    args << "-fpic"
	                    args << "-fno-builtin"
		            	args << "-ffreestanding"
	                }
	                linker.withArguments { args ->
	                	args << "-nostartfiles"
			       		args << "-nodefaultlibs"
			        	args << "-nostdlib"
	                }
	            }
	            target("tinkerArm7HardVfp") {
	                File srcDir = new File("src")
	                cppCompiler.executable = "arm-eabi-gcc"
	                cCompiler.executable = "arm-eabi-gcc"
	                assembler.executable = "arm-eabi-gcc"
	                linker.executable = "arm-eabi-gcc"
	                staticLibArchiver.executable = "arm-eabi-ar"
	                cCompiler.withArguments { args ->
	                	args << "-I" + projectDir + "/../archArm/src/archArm/headers"
	                    args << "-I" + projectDir + "/../archArm/src/archArm/headers/arm7"
                        args << "-D__arm__"
	                    args << "-mfpu=vfp"
	                    args << "-mfloat-abi=hard"
						args << "-march=armv7-a"
	                    args << "-fpic"
	                    args << "-fno-builtin"
		            	args << "-ffreestanding"
	                }
	                linker.withArguments { args ->
	                	args << "-mfpu=vfp"
	                    args << "-mfloat-abi=hard"
						args << "-march=armv5"
	                    args << "-fpic"
	                	args << "-nostartfiles"
			       		args << "-nodefaultlibs"
			        	args << "-nostdlib"
	                }
	            }
	        }
	    }
	    platforms {
	        tinkerArm4Soft {
	            architecture "arm"
	        }
	        tinkerArm {
	            architecture "arm"
	        }
	        tinkerArm4HardVfp {
	            architecture "arm"
	        }
			tinkerArm7Soft {
	            architecture "arm"
	        }
	        tinkerArm7HardVfp {
	            architecture "arm"
	        }
	        tinkerPpc {
	            architecture "ppc"
	        }
	    }
	}
}
