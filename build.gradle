apply plugin: 'assembler'
apply plugin: 'c'

model {
    buildTypes {
        debug
        release
    }
    toolChains {
        xgcc(Gcc) {
            target("tinkerPpc") {
                File srcDir = new File("src")
                cppCompiler.executable = "powerpc-eabi-gcc"
                cCompiler.executable = "powerpc-eabi-gcc"
                assembler.executable = "powerpc-eabi-as"
                linker.executable = "powerpc-eabi-gcc"
                staticLibArchiver.executable = "powerpc-eabi-ar"
                cCompiler.withArguments { args ->
                    args << "-I" + srcDir.getAbsolutePath() + "/arch/ppc32"
                    //args << "-nostdinc"
                    args << "-mcpu=powerpc"
                    args << "-pedantic"
                    //args << "-pedantic-errors"
                    args << "-Wall"
                    args << "-Wextra"
                    //args << "-Werror"
                    args << "-c"
                    args << "-fmessage-length=0"
                    args << "-std=gnu99"
                    args << "-fno-builtin"
                    args << "-ffreestanding"
                }
                linker.withArguments { args ->
                    args << "-nostartfiles"
                    args << "-nodefaultlibs"
                    args << "-nostdlib"
                    args << "-static"
                }
            }
            target("tinkerX86") {
                File srcDir = new File("src")
                cppCompiler.executable = "i686-elf-gcc"
                cCompiler.executable = "i686-elf-gcc"
                assembler.executable = "i686-elf-as"
                linker.executable = "i686-elf-gcc"
                staticLibArchiver.executable = "i686-elf-ar"
                cCompiler.withArguments { args ->
                    args << "-I" + srcDir.getAbsolutePath() + "/arch/x86"
                    //args << "-nostdinc"
                    args << "-march=i686"
                    args << "-pedantic"
                    //args << "-pedantic-errors"
                    args << "-Wall"
                    args << "-Wextra"
                    //args << "-Werror"
                    args << "-c"
                    args << "-fmessage-length=0"
                    args << "-std=gnu99"
                    args << "-fno-builtin"
                    args << "-ffreestanding"
                }
                linker.withArguments { args->
                    args << "-nostartfiles"
                    args << "-nodefaultlibs"
                    args << "-nostdlib"
                    args << "-static"
                }
            }
            target("tinkerArm") {
                File srcDir = new File("src")
                cppCompiler.executable = "arm-eabi-gcc"
                cCompiler.executable = "arm-eabi-gcc"
                assembler.executable = "arm-eabi-as"
                linker.executable = "arm-eabi-gcc"
                staticLibArchiver.executable = "arm-eabi-ar"
                cCompiler.withArguments { args ->
                    args << "-I" + srcDir.getAbsolutePath() + "/arch/arm"
                    //args << "-nostdinc"
                    args << "-pedantic"
                    //args << "-pedantic-errors"
                    args << "-Wall"
                    args << "-Wextra"
                    //args << "-Werror"
                    args << "-c"
                    args << "-fmessage-length=0"
                    args << "-std=gnu99"
                    args << "-fno-builtin"
                    args << "-ffreestanding"
                }
                linker.withArguments { args->
                    args << "-nostartfiles"
                    args << "-nodefaultlibs"
                    args << "-nostdlib"
                    args << "-static"
                }
            }
        }
    }
    platforms {
        tinkerArm {
            architecture "arm"
        }
        tinkerPpc {
            architecture "ppc"
        }
        tinkerX86 {
            architecture "x86"
        }
    }
}

libraries {
    // the base (headers)
    base {}
    // architectures
    archX86 {
        targetPlatforms "tinkerX86"
    }
    archArm {
        targetPlatforms "tinkerArm"
    }
    archPowerPc {
        targetPlatforms "tinkerPpc"
    }
    // the core
    core {}
    boot {}
    api {}
}

executables {
    armRaspPi {
        targetPlatforms "tinkerArm"
        binaries.all {
            File srcDir = new File('src')
            linker.args "-lgcc",
                 "-T",
                 (srcDir.getAbsolutePath() + "\\arch\\arm\\pi\\linker.ld")
        }
    }
    x86 {
        targetPlatforms "tinkerX86"
        binaries.all {
            File srcDir = new File('src')
            linker.args "-lgcc",
                 "-T",
                 (srcDir.getAbsolutePath() + "\\arch\\x86\\linker.ld")
        }
    }
    ppc32Gdb {
        targetPlatforms "tinkerPpc"
        binaries.all {
            File srcDir = new File('src')
            linker.args "-lgcc",
                 "-T",
                 (srcDir.getAbsolutePath() + "\\arch\\ppc32\\gdb_sim\\linker.ld")
        }
    }
}

sources {
    base {
        c {
            exportedHeaders {
                srcDirs "src", "src/api"
            }
        }
    }
    archX86 {
        c {
            lib libraries.base.static
            exportedHeaders {
                srcDir "src/arch/x86"
            }
        }
        asm {
            source {
                srcDirs "src/arch/x86"
                include "*.S"
            }
        }
    }
    archPowerPc {
        c {
            lib libraries.base.static
            source {
                srcDirs "src/arch/ppc32"
                include "*.c"
            }
            exportedHeaders {
                srcDir "src/arch/ppc32"
            }
        }
        asm {
            source {
                srcDirs "src/arch/ppc32"
                include "*.S"
            }
        }
    }
    archArm {
        c {
            lib libraries.base.static
            source {
                srcDirs "src/arch/arm"
                include "*.c"
            }
            exportedHeaders {
                srcDir "src/arch/arm"
            }
        }
        asm {
            source {
                srcDirs "src/arch/arm"
                include "*.S"
            }
        }
    }
    api {
         c {
             lib libraries.base.static
             source {
                 srcDir "src/api"
                 include "**/*.c"
             }
         }
    }
    boot {
         c {
             lib libraries.base.static
             source {
                 srcDir "src/boot"
                 include "**/*.c"
             }
         }
    }
    core {
         c {
             lib libraries.base.static
             source {
                 srcDirs "src/kernel", "src/devices"
                 include "**/*.c"
             }
         }
    }
    ppc32Gdb {
        c {
            lib libraries.base.static        // core
            lib libraries.api.static         // api layer
            lib libraries.archPowerPc.static // powerpc code
            lib libraries.boot.static        // boot c code into kernel
            lib libraries.core.static        // the core kernel
            source {
                srcDirs "src/arch/ppc32/gdb_sim", "src/arch/ppc32/generic", "src/tinker"
                include "**/*.c"
            }
        }
    }
    armRaspPi {
        c {
            lib libraries.base.static        // core
            lib libraries.api.static         // api layer
            lib libraries.archArm.static     // generic arm code
            lib libraries.boot.static        // boot c code into kernel
            lib libraries.core.static        // the core kernel
            source {
                srcDirs "src/arch/arm/pi", "src/tinker"
                include "**/*.c"
            }
        }
        asm {
        	source {
        		srcDirs "src/arch/arm/pi"
        		include "**/*.S"
        	}
        }
        binaries.all {
        	cCompiler.args "-mfpu=vfp", "-mfloat-abi=hard", "-march=armv6zk", "-mtune=arm1176jzf-s"
        	linker.args "-mfpu=vfp", "-mfloat-abi=hard", "-march=armv6zk", "-mtune=arm1176jzf-s"
        }
    }
    x86 {
        c {
            lib libraries.base.static    // core
            lib libraries.api.static     // api layer
            lib libraries.archX86.static // x86 code
            lib libraries.boot.static    // boot c code into kernel
            lib libraries.core.static    // the core kernel
            source {
                srcDirs "src/tinker", "src/arch/x86"
                include "**/*.c"
            }
        }
    }
    binaries.all {
        if (buildType == buildTypes.debug) {
            cCompiler.args "-O0", "-g3", "-gdwarf-4", "-DBUILDING_KERNEL","-DKERNEL_SHELL", "-DKERNEL_DEBUGGING", "-UMEMORY_DEBUGGING","-UDEBUG_COLLECTIONS","-DPROCESS_DEBUGGING"
        } else if (buildType == buildTypes.release) {
            cCompiler.args "-Ofast", "-g0", "-gdwarf-4"
            linker.args "-s","-lgcc"
        }
    }
}