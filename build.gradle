apply plugin: 'c'
apply plugin: 'assembler'

model {
    platforms {
        tinker_arm {
            architecture "arm"
        }
        tinker_powerpc {
            architecture "ppc"
        }
        tinker_x86 {
            architecture "x86"
        }
    }
    toolChains {
        gccPowerpc(Gcc) {
            getCppCompiler().setExecutable 'powerpc-none-eabi-gcc'
            getCCompiler().setExecutable 'powerpc-none-eabi-gcc'
            getAssembler().setExecutable 'powerpc-none-eabi-as'
            getLinker().setExecutable 'powerpc-none-eabi-gcc'
            getStaticLibArchiver().setExecutable 'powerpc-none-eabi-ar'
            addPlatformConfiguration(new PowerPCSupport())
        }
        gccX86(Gcc) {
            addPlatformConfiguration(new X86Support())
        }
    }
}

    class PowerPCSupport implements TargetPlatformConfiguration {
        boolean supportsPlatform(Platform element) {
            return element.getArchitecture().name == "ppc"
        }

        List<String> getCppCompilerArgs() {
            []
        }

        List<String> getObjectiveCppCompilerArgs() {
            []
        }

        List<String> getObjectiveCCompilerArgs() {
            []
        }

        List<String> getCCompilerArgs() {
            []
        }

        List<String> getAssemblerArgs() {
            []
        }

        List<String> getLinkerArgs() {
            []
        }

        List<String> getStaticLibraryArchiverArgs() {
            []
        }
    }

    class X86Support implements TargetPlatformConfiguration {
        boolean supportsPlatform(Platform element) {
            return element.getArchitecture().name == "x86"
        }

        List<String> getCppCompilerArgs() {
            []
        }

        List<String> getObjectiveCppCompilerArgs() {
            []
        }

        List<String> getObjectiveCCompilerArgs() {
            []
        }

        List<String> getCCompilerArgs() {
            ["-nostdinc",
             "-D__BUILDING_KERNEL",
             "-D__KERNEL_SHELL",
             "-D__KERNEL_DEBUGGING",
             "-D__MEMORY_DEBUGGING",
             "-D__DEBUG_COLLECTIONS",
             "-D__PROCESS_DEBUGGING",
             "-O0",
             "-march=i686",
             "-g3",
             "-gdwarf-4",
             "-pedantic",
             //"-pedantic-errors",
             "-Wall",
             "-Wextra",
             //"-Werror",
             "-c",
             "-fmessage-length=0",
             "-std=gnu99",
             "-fno-builtin",
             "-ffreestanding"]
        }

        List<String> getAssemblerArgs() {
            []
        }

        List<String> getLinkerArgs() {
            []
        }

        List<String> getStaticLibraryArchiverArgs() {
            []
        }
    }

libraries {
    // the core kernel
    base {}
    arch_x86 {}
    arch_arm6 {}
    arch_ppc {}
    core {}
    // all the core architectures
    armv6 {}
    ppc32 {}
    x86 {}
}

executables {
    armv6_pi {}
    x86 {}
    ppc32_gdb {}
}

sources {
    base {
        c {
            exportedHeaders {
                srcDirs "src", "src/api"
            }
        }
    }
    arch_x86 {
        c {
            exportedHeaders {
                srcDir "src/arch/x86"
            }
        }
        asm {
            source {
                srcDirs "src/arch/x86"
                include "**/*.S"
            }
        }
    }
    core {
         c {
             lib libraries.base
             lib libraries.arch_x86
             source {
                 srcDirs "src/api", "src/boot", "src/kernel", "src/devices"
                 include "**/*.c"
             }
         }
    }
}