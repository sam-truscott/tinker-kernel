apply plugin: 'assembler'
apply plugin: 'c'

/*
INITIALISATION      0x00000001
SHELL               0x00000002
TIMER               0x00000004
INTC                0x00000008
MEMORY              0x00000010
COLLECTIONS         0x00000020
PROCESS             0x00000040
SCHEDULING          0x00000080
SCHEDULING_TRACE    0x00000100
SHM                 0x00000200
TARGET              0x00000400
SYSCALL             0x00000800
ALARM               0x00001000
REGISTRY            0x00002000
PIPE                0x00004000
PIPE_TRACE          0x00008000
IDLE                0x00010000
ELF_LOADER          0x00020000
*/

allprojects {
	model {
	    buildTypes {
	        debug
	        release
	    }
	    /* compiler and linker options for all toolchains */
	    binaries {
	    	all {
	    		/* https://gcc.gnu.org/onlinedocs/gcc/Warning-Options.html */
		    	cCompiler.args "-pedantic",   /* always be pedantic - see below */
		            "-pedantic-errors",
		            "-Wall",
		            "-Wextra",
		            "-Werror",
		            "-Wshadow=global",
		            "-Winline",
		            "-Wundef",
		            "-Wstrict-prototypes",
		            "-Wwrite-strings",
		            "-Wfloat-equal",
		            "-Wpointer-arith",
		            "-Wnull-dereference",
		            "-Warray-bounds=2",
		            //"-Wcast-align=strict",
		            "-Waggregate-return",
		            "-Wstrict-overflow=3",
		            "-Wswitch-default",
		            "-Wswitch-enum",
		            "-Wformat=2",
		            "-Winit-self",
		            "-ffunction-sections",
		            "-fdata-sections",
		            "-c",
		            "-fmessage-length=0",
		            "-std=gnu2x",             /* for now use the default */
		            "-DBUILDING_KERNEL",      /* used for apis - building kernel */
                    "-DDEBUG_KERNEL_ONLY",    /* debug the kernel only */
		            "-DKERNEL_DEBUGGING",     /* enable debugging */
                    //"-DDEBUG_VALUE=0x0"
                    "-DDEBUG_VALUE=0x00000000"
                    //"-DDEBUG_VALUE=0xFFFFFFFFu"
		        linker.args  "-static"        /* always static - no linking */
		        if (buildType == buildTypes.debug) {
		            cCompiler.args "-O0",     /* no optimisation */
		            	"-g",
		                "-g3",                /* lots of debugging */
		                "-fverbose-asm",
		                "-DKERNEL_SHELL",     /* enable internal shell */
                        "-DKERNEL_SHELL_DEBUG",/* enable shell debugging */
		                "-UUNIT_TESTS"        /* enable unit tests */
		            linker.args  "-fno-lto"   /* for now, disable lto */
		        } else if (buildType == buildTypes.release) {
		            cCompiler.args "-Os",     /* default optimisation level */
		                "-g0",                /* no debugging */
		                "-UKERNEL_DEBUGGING", /* no debugging */
		                "-DKERNEL_SHELL",     /* enable shell */
		                "-UKERNEL_SHELL_DEBUG" /* no shell debugging */
                    linker.args  "-fno-lto"   /* for now, disable lto */
		        }
	    	}
	    }
	    /* native and cross toolchains */
	    toolChains {
	       /* Normal non-cross-compiler gcc */
	        gcc(Gcc) {
	           /* GCC on Windows */
	           target("windows_x86") {
	               File srcDir = new File("src")
	               cCompiler.withArguments { args ->
	                   args << "-Wno-maybe-uninitialized"
	                   args << "-Wno-pointer-to-int-cast"
	                   args << "-Wno-int-to-pointer-cast"
	                   args << "-Wno-type-limits"
	                   args << "-D__x86_64__"
                       args << "-DUNIT_TESTS"
	                   args << "-DIS_HOST_UNIT_TEST"
                       args << "-DSCHEDULER_DEBUGGING"
                       args << "-DKERNEL_DEBUGGING"
                       args << "-DMEMSET"
                       args << "-ftest-coverage"
                       args << "-fprofile-arcs"
	                   args << "-I" + projectDir + "/../hostTestDriver/src/hostTestDriver/headers"
	               }
	               linker.withArguments { args ->
	                   args << "-ftest-coverage"
	                   args << "-fprofile-arcs"
	               }
	           }
	           /* GCC on Linux AMD 64bit */
	           target("linux_x86-64") {
	               File srcDir = new File("src")
	               cCompiler.withArguments { args ->
	                   args << "-Wno-maybe-uninitialized"
	                   args << "-Wno-pointer-to-int-cast"
	                   args << "-Wno-int-to-pointer-cast"
	                   args << "-Wno-type-limits"
	                   args << "-D__i386__"
	                   args << "-DUSE_DL_PREFIX"
		               args << "-fPIC"
                       args << "-DUNIT_TESTS"
	                   args << "-DIS_HOST_UNIT_TEST"
                       args << "-DSCHEDULER_DEBUGGING"
                       args << "-DKERNEL_DEBUGGING"
                       args << "-DMEMSET"
                       args << "-DHAVE_MREMAP=0"
                       //args << "-ftest-coverage"
                       //args << "-fprofile-arcs"
	                   args << "-I" + projectDir + "/../hostTestDriver/src/hostTestDriver/headers"
	               }
	               linker.withArguments { args ->
	                   //args << "-ftest-coverage"
	                   //args << "-fprofile-arcs"
                       args << "-fPIC"
	               }
	           }
	           /* GCC on Unix 32bit */
	           target("unix_x86") {
	               File srcDir = new File("src")
	               cCompiler.withArguments { args ->
	                   args << "-Wno-maybe-uninitialized"
	                   args << "-Wno-pointer-to-int-cast"
	                   args << "-Wno-int-to-pointer-cast"
	                   args << "-Wno-type-limits"
	                   args << "-DUSE_DL_PREFIX"
		               args << "-fPIC"
                       args << "-DUNIT_TESTS"
	                   args << "-DIS_HOST_UNIT_TEST"
                       args << "-DSCHEDULER_DEBUGGING"
                       args << "-DKERNEL_DEBUGGING"
                       args << "-DMEMSET"
                       args << "-DHAVE_MREMAP=0"
                       //args << "-ftest-coverage"
                       //args << "-fprofile-arcs"
	                   args << "-I" + projectDir + "/../hostTestDriver/src/hostTestDriver/headers"
	               }
	               linker.withArguments { args ->
	                   //args << "-ftest-coverage"
	                   //args << "-fprofile-arcs"
                       args << "-fPIC"
	               }
	           }
	           /* GCC on Linux ARM v7 */
	           target("linux_arm-v7") {
	               File srcDir = new File("src")
                   cCompiler.withArguments { args ->
                       args << "-w"
                       args << "-D__arm__"
                       args << "-DUSE_DL_PREFIX"
                       args << "-fPIC"
                       args << "-DUNIT_TESTS"
                       args << "-DIS_HOST_UNIT_TEST"
                       args << "-DSCHEDULER_DEBUGGING"
                       args << "-DKERNEL_DEBUGGING"
                       args << "-DMEMSET"
                       args << "-ftest-coverage"
                       args << "-fprofile-arcs"
                       args << "-I" + projectDir + "/../hostTestDriver/src/hostTestDriver/headers"
                   }
                   linker.withArguments { args ->
                       args << "-ftest-coverage"
                       args << "-fprofile-arcs"
                       args << "-fPIC"
                   }
	           }
	        }
	        /* Cross compilers */
	        xgcc(Gcc) {
	            /* gcc for powerpc */
	            target("tinkerPpc") {
	                File srcDir = new File("src")
	                cppCompiler.executable = "powerpc-eabi-gcc"
	                cCompiler.executable = "powerpc-eabi-gcc"
	                assembler.executable = "powerpc-eabi-gcc"
	                linker.executable = "powerpc-eabi-gcc"
	                staticLibArchiver.executable = "powerpc-eabi-ar"
	                cCompiler.withArguments { args ->
	                    args << "-I" + projectDir + "/../archPowerPc/src/archPowerPc/headers"
	                    args << "-mcpu=powerpc"
	                    args << "-Wno-maybe-uninitialized"
	                    args << "-fpic"
	                    args << "-fno-builtin"
		            	args << "-ffreestanding"
		            	args << "-fanalyzer" /* https://gcc.gnu.org/onlinedocs/gcc-10.1.0/gcc/Static-Analyzer-Options.html */
	                }
	                linker.withArguments { args ->
	                	args << "-nostartfiles"
			       		args << "-nodefaultlibs"
			        	args << "-nostdlib"
	                }
	            }
	            /* gcc for arm (generic) */
	            target("tinkerArm") {
	                File srcDir = new File("src")
	                cppCompiler.executable = "arm-eabi-gcc"
	                cCompiler.executable = "arm-eabi-gcc"
	                assembler.executable = "arm-eabi-gcc"
	                linker.executable = "arm-eabi-gcc"
	                staticLibArchiver.executable = "arm-eabi-ar"
	                cCompiler.withArguments { args ->
	                    args << "-marm"
                        args << "-march=armv5te"
                        args << "-mfloat-abi=soft"
                        //args << "-fno-use-cxa-atexit"
                        //args << "--specs=nano.specs"
                        args << "-fanalyzer" /* https://gcc.gnu.org/onlinedocs/gcc-10.1.0/gcc/Static-Analyzer-Options.html */
	                }
                    linker.withArguments { args ->
                        args << "-mfloat-abi=soft"
                        args << "-march=armv5te"
                        args << "-fno-use-cxa-atexit"
                        //args << "--specs=nano.specs"
                    }
	            }
	            /* gcc for arm v4 - softfp */
	            target("tinkerArm4Soft") {
	                File srcDir = new File("src")
	                cppCompiler.executable = "arm-eabi-gcc"
	                cCompiler.executable = "arm-eabi-gcc"
	                assembler.executable = "arm-eabi-gcc"
	                linker.executable = "arm-eabi-gcc"
	                staticLibArchiver.executable = "arm-eabi-ar"
	                cCompiler.withArguments { args ->
	                	args << "-I" + projectDir + "/../archArm/src/archArm/headers"
	                    args << "-I" + projectDir + "/../archArm/src/archArm/headers/arm5"
	                    args << "-marm"
                        args << "-D__arm__"
						args << "-march=armv5te"
                        args << "-mfloat-abi=soft"
	                    args << "-fpic"
	                    args << "-fno-builtin"
		            	args << "-ffreestanding"
		            	args << "-fanalyzer" /* https://gcc.gnu.org/onlinedocs/gcc-10.1.0/gcc/Static-Analyzer-Options.html */
	                }
	                linker.withArguments { args ->
                        args << "-mfloat-abi=soft"
                        args << "-march=armv5te"
	                	args << "-nostartfiles"
			       		args << "-nodefaultlibs"
			        	args << "-nostdlib"
	                }
	            }
	            /* gcc for arm v4 - hardfp */
	            target("tinkerArm4HardVfp") {
	                File srcDir = new File("src")
	                cppCompiler.executable = "arm-eabi-gcc"
	                cCompiler.executable = "arm-eabi-gcc"
	                assembler.executable = "arm-eabi-gcc"
	                linker.executable = "arm-eabi-gcc"
	                staticLibArchiver.executable = "arm-eabi-ar"
	                cCompiler.withArguments { args ->
	                	args << "-I" + projectDir + "/../archArm/src/archArm/headers"
	                    args << "-I" + projectDir + "/../archArm/src/archArm/headers/arm5"
	                    args << "-marm"
                        args << "-D__arm__"
	                    args << "-mfpu=vfp"
	                    args << "-mfloat-abi=hard"
						args << "-march=armv5te"
	                    args << "-fpic"
	                    args << "-fno-builtin"
		            	args << "-ffreestanding"
		            	args << "-fanalyzer" /* https://gcc.gnu.org/onlinedocs/gcc-10.1.0/gcc/Static-Analyzer-Options.html */
	                }
	                linker.withArguments { args ->
	                	args << "-mfpu=vfp"
	                    args << "-mfloat-abi=hard"
						args << "-march=armv5te"
	                    args << "-fpic"
	                	args << "-nostartfiles"
			       		args << "-nodefaultlibs"
			        	args << "-nostdlib"
	                }
	            }
	            /* gcc for arm v7 - softfp */
				target("tinkerArm7Soft") {
	                File srcDir = new File("src")
	                cppCompiler.executable = "arm-eabi-gcc"
	                cCompiler.executable = "arm-eabi-gcc"
	                assembler.executable = "arm-eabi-gcc"
	                linker.executable = "arm-eabi-gcc"
	                staticLibArchiver.executable = "arm-eabi-ar"
	                cCompiler.withArguments { args ->
	                	args << "-I" + projectDir + "/../archArm/src/archArm/headers"
	                    args << "-I" + projectDir + "/../archArm/src/archArm/headers/arm7"
                        args << "-D__arm__"
						args << "-march=armv7-a"
                        args << "-mfloat-abi=soft"
	                    args << "-fpic"
	                    args << "-fno-builtin"
		            	args << "-ffreestanding"
		            	args << "-fanalyzer" /* https://gcc.gnu.org/onlinedocs/gcc-10.1.0/gcc/Static-Analyzer-Options.html */
	                }
	                linker.withArguments { args ->
                        args << "-mfloat-abi=soft"
	                	args << "-nostartfiles"
			       		args << "-nodefaultlibs"
			        	args << "-nostdlib"
	                }
	            }
	            /* gcc for arm v7 - hardfp */
	            target("tinkerArm7HardVfp") {
	                File srcDir = new File("src")
	                cppCompiler.executable = "arm-eabi-gcc"
	                cCompiler.executable = "arm-eabi-gcc"
	                assembler.executable = "arm-eabi-gcc"
	                linker.executable = "arm-eabi-gcc"
	                staticLibArchiver.executable = "arm-eabi-ar"
	                cCompiler.withArguments { args ->
	                	args << "-I" + projectDir + "/../archArm/src/archArm/headers"
	                    args << "-I" + projectDir + "/../archArm/src/archArm/headers/arm7"
                        args << "-D__arm__"
	                    args << "-mfpu=vfp"
	                    args << "-mfloat-abi=hard"
						args << "-march=armv7-a"
	                    args << "-fpic"
	                    args << "-fno-builtin"
		            	args << "-ffreestanding"
		            	args << "-fanalyzer" /* https://gcc.gnu.org/onlinedocs/gcc-10.1.0/gcc/Static-Analyzer-Options.html */
	                }
	                linker.withArguments { args ->
	                	args << "-mfpu=vfp"
	                    args << "-mfloat-abi=hard"
						args << "-march=armv7-a"
	                    args << "-fpic"
	                	args << "-nostartfiles"
			       		args << "-nodefaultlibs"
			        	args << "-nostdlib"
	                }
	            }
	        }
	    }
	    /* platforms and their architecture */
	    platforms {
	        tinkerArm4Soft {
	            architecture "arm"
	        }
	        tinkerArm {
	            architecture "arm"
	        }
	        tinkerArm4HardVfp {
	            architecture "arm"
	        }
			tinkerArm7Soft {
	            architecture "arm"
	        }
	        tinkerArm7HardVfp {
	            architecture "arm"
	        }
	        tinkerPpc {
	            architecture "ppc"
	        }
	    }
	}
}
