apply plugin: 'assembler'
apply plugin: 'c'

allprojects {
	model {
	    buildTypes {
	        debug
	        release
	    }
	    binaries {
	    	all {
		    	cCompiler.args "-pedantic",
		            "-pedantic-errors",
		            "-Wall",
		            "-Wextra",
		            "-Werror",
		            "-c",
		            "-fmessage-length=0",
		            "-std=gnu11",
		            "-DBUILDING_KERNEL"
		        linker.args  "-static"
		        if (buildType == buildTypes.debug) {
		            cCompiler.args "-Og", 
		                "-g3",
		                "-gdwarf-4",
		                "-DKERNEL_DEBUGGING",
		                "-DKERNEL_INIT",
		                "-DKERNEL_SHELL",
		                "-UKERNEL_SHELL_DEBUG",
		                "-UTIMER_DEBUGGING",
		                "-UINTC_DEBUGGING",
		                "-UMEMORY_DEBUGGING",
		                "-UDEBUG_COLLECTIONS",
		                "-UPROCESS_DEBUGGING",
		                "-USCHEDULER_DEBUGGING",
		                "-USCHEDULER_TRACING",
		                "-USHM_DEBUGGING",
		                "-UTARGET_DEBUGGING",
		                "-USYSCALL_DEBUGGING",
		                "-UALARM_DEBUGGING",
		                "-UREGISTRY_DEBUGGING",
		                "-UPIPE_DEBUGGING",
		                "-UPIPE_TRACING",
		                "-UIDLE_DEBUGGING",
		                "-UUNIT_TESTS",
		                "-UIN_DEBUGGING",
		                "-UELF_LOAD_DEBUGGING"
		        } else if (buildType == buildTypes.release) {
		            cCompiler.args "-Ofast",
		                "-g0",
		                "-UKERNEL_DEBUGGING",
		                "-DKERNEL_SHELL",
		                "-UKERNEL_SHELL_DEBUG"
		            linker.args "-s"
			    }
	    	}
	    }
	    toolChains {
	        gcc(Gcc) {
	           target("windows_x86") {
	               File srcDir = new File("src")
	               cCompiler.withArguments { args ->
	                   args << "-Wno-maybe-uninitialized"
	                   args << "-Wno-pointer-to-int-cast"
	                   args << "-Wno-int-to-pointer-cast"
	                   args << "-Wno-type-limits"
	                   args << "-D__i386__"
                       args << "-DUNIT_TESTS"
	                   args << "-DIS_HOST_UNIT_TEST"
                       args << "-DSCHEDULER_DEBUGGING"
                       args << "-DKERNEL_DEBUGGING"
                       args << "-DMEMSET"
                       args << "-ftest-coverage"
                       args << "-fprofile-arcs"
	                   args << "-I" + srcDir.getAbsolutePath() + "/../hostTestDriver/src/hostTestDriver/headers"
	               }
	               linker.withArguments { args ->
	                   args << "-ftest-coverage"
	                   args << "-fprofile-arcs"
	               }
	           }
	        }
	        xgcc(Gcc) {
	            target("tinkerPpc") {
	                File srcDir = new File("src")
	                cppCompiler.executable = "powerpc-eabi-gcc"
	                cCompiler.executable = "powerpc-eabi-gcc"
	                assembler.executable = "powerpc-eabi-gcc"
	                linker.executable = "powerpc-eabi-gcc"
	                staticLibArchiver.executable = "powerpc-eabi-ar"
	                cCompiler.withArguments { args ->
	                    args << "-I" + srcDir.getAbsolutePath() + "/../archPowerPc/src/archPowerPc/headers"
	                    args << "-mcpu=powerpc"
	                    args << "-Wno-maybe-uninitialized"
	                    args << "-fpic"
	                    args << "-fno-builtin"
		            	args << "-ffreestanding"
	                }
	                linker.withArguments { args ->
	                	args << "-nostartfiles"
			       		args << "-nodefaultlibs"
			        	args << "-nostdlib"
	                }
	            }
	            target("tinkerArm4Soft") {
	                File srcDir = new File("src")
	                cppCompiler.executable = "arm-eabi-gcc"
	                cCompiler.executable = "arm-eabi-gcc"
	                assembler.executable = "arm-eabi-gcc"
	                linker.executable = "arm-eabi-gcc"
	                staticLibArchiver.executable = "arm-eabi-ar"
	                cCompiler.withArguments { args ->
	                	args << "-I" + srcDir.getAbsolutePath() + "/../archArm/src/archArm/headers"
	                    args << "-I" + srcDir.getAbsolutePath() + "/../archArm/src/archArm/headers/arm5"
	                    args << "-marm"
                        args << "-D__arm__"
						args << "-march=armv5"
	                    args << "-fpic"
	                    args << "-fno-builtin"
		            	args << "-ffreestanding"
	                }
	                linker.withArguments { args ->
	                	args << "-nostartfiles"
			       		args << "-nodefaultlibs"
			        	args << "-nostdlib"
	                }
	            }
	            target("tinkerArm4HardVfp") {
	                File srcDir = new File("src")
	                cppCompiler.executable = "arm-eabi-gcc"
	                cCompiler.executable = "arm-eabi-gcc"
	                assembler.executable = "arm-eabi-gcc"
	                linker.executable = "arm-eabi-gcc"
	                staticLibArchiver.executable = "arm-eabi-ar"
	                cCompiler.withArguments { args ->
	                	args << "-I" + srcDir.getAbsolutePath() + "/../archArm/src/archArm/headers"
	                    args << "-I" + srcDir.getAbsolutePath() + "/../archArm/src/archArm/headers/arm5"
	                    args << "-marm"
                        args << "-D__arm__"
	                    args << "-mfpu=vfp"
	                    args << "-mfloat-abi=hard"
						args << "-march=armv5"
	                    args << "-fpic"
	                    args << "-fno-builtin"
		            	args << "-ffreestanding"
	                }
	                linker.withArguments { args ->
	                	args << "-mfpu=vfp"
	                    args << "-mfloat-abi=hard"
						args << "-march=armv5"
	                    args << "-fpic"
	                	args << "-nostartfiles"
			       		args << "-nodefaultlibs"
			        	args << "-nostdlib"
	                }
	            }
				target("tinkerArm7Soft") {
	                File srcDir = new File("src")
	                cppCompiler.executable = "arm-eabi-gcc"
	                cCompiler.executable = "arm-eabi-gcc"
	                assembler.executable = "arm-eabi-gcc"
	                linker.executable = "arm-eabi-gcc"
	                staticLibArchiver.executable = "arm-eabi-ar"
	                cCompiler.withArguments { args ->
	                	args << "-I" + srcDir.getAbsolutePath() + "/../archArm/src/archArm/headers"
	                    args << "-I" + srcDir.getAbsolutePath() + "/../archArm/src/archArm/headers/arm7"
                        args << "-D__arm__"
						args << "-march=armv7-a"
	                    args << "-fpic"
	                    args << "-fno-builtin"
		            	args << "-ffreestanding"
	                }
	                linker.withArguments { args ->
	                	args << "-nostartfiles"
			       		args << "-nodefaultlibs"
			        	args << "-nostdlib"
	                }
	            }
	            target("tinkerArm7HardVfp") {
	                File srcDir = new File("src")
	                cppCompiler.executable = "arm-eabi-gcc"
	                cCompiler.executable = "arm-eabi-gcc"
	                assembler.executable = "arm-eabi-gcc"
	                linker.executable = "arm-eabi-gcc"
	                staticLibArchiver.executable = "arm-eabi-ar"
	                cCompiler.withArguments { args ->
	                	args << "-I" + srcDir.getAbsolutePath() + "/../archArm/src/archArm/headers"
	                    args << "-I" + srcDir.getAbsolutePath() + "/../archArm/src/archArm/headers/arm7"
                        args << "-D__arm__"
	                    args << "-mfpu=vfp"
	                    args << "-mfloat-abi=hard"
						args << "-march=armv7-a"
	                    args << "-fpic"
	                    args << "-fno-builtin"
		            	args << "-ffreestanding"
	                }
	                linker.withArguments { args ->
	                	args << "-mfpu=vfp"
	                    args << "-mfloat-abi=hard"
						args << "-march=armv5"
	                    args << "-fpic"
	                	args << "-nostartfiles"
			       		args << "-nodefaultlibs"
			        	args << "-nostdlib"
	                }
	            }
	        }
	    }
	    platforms {
	        tinkerArm4Soft {
	            architecture "arm"
	        }
	        tinkerArm4HardVfp {
	            architecture "arm"
	        }
			tinkerArm7Soft {
	            architecture "arm"
	        }
	        tinkerArm7HardVfp {
	            architecture "arm"
	        }
	        tinkerPpc {
	            architecture "ppc"
	        }
	    }
	}
}
