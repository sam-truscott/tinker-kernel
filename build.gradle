apply plugin: 'c'
apply plugin: 'assembler'

model {
    buildTypes {
        debug
        release
    }
    platforms {
        tinkerArm {
            architecture "arm"
            operatingSystem "linux"
        }
        tinkerPowerPc {
            architecture "ppc"
            operatingSystem "linux"
        }
        tinkerX86 {
            architecture "x86"
            operatingSystem "linux"
        }
    }
    toolChains {
        gccPowerPc(Gcc) {
            getCppCompiler().setExecutable 'powerpc-eabi-gcc'
            getCCompiler().setExecutable 'powerpc-eabi-gcc'
            getAssembler().setExecutable 'powerpc-eabi-as'
            getLinker().setExecutable 'powerpc-eabi-gcc'
            getStaticLibArchiver().setExecutable 'powerpc-eabi-ar'
            addPlatformConfiguration(new PowerPcSupport())
        }
        gccX86(Gcc) {
            addPlatformConfiguration(new X86Support())
        }
    }
}

binaries.all {
    if (toolChain in Gcc && buildType == buildTypes.debug) {
        cCompiler.args "-D__BUILDING_KERNEL",
             "-D__KERNEL_SHELL",
             "-D__KERNEL_DEBUGGING",
             "-D__MEMORY_DEBUGGING",
             "-D__DEBUG_COLLECTIONS",
             "-D__PROCESS_DEBUGGING",
             "-O0",
             "-g3",
             "-gdwarf-4"
    }
    if (toolChain in Gcc && buildType == buildTypes.release) {
        cCompiler.args "-O3",
             "-g0",
             "-gdwarf-4"
    }
}

    class PowerPcSupport implements TargetPlatformConfiguration {
        File srcDir = new File('src')

        boolean supportsPlatform(Platform element) {
            return element.getArchitecture().name == "ppc"
        }

        List<String> getCppCompilerArgs() {
            []
        }

        List<String> getObjectiveCppCompilerArgs() {
            []
        }

        List<String> getObjectiveCCompilerArgs() {
            []
        }

        List<String> getCCompilerArgs() {
            ["-I" + srcDir.getAbsolutePath() + "/arch/ppc32",
             "-nostdinc",
             "-mcpu=powerpc",
             "-pedantic",
             //"-pedantic-errors",
             "-Wall",
             "-Wextra",
             //"-Werror",
             "-c",
             "-fmessage-length=0",
             "-std=gnu99",
             "-fno-builtin",
             "-ffreestanding"]
        }

        List<String> getAssemblerArgs() {
            []
        }

        List<String> getLinkerArgs() {
            ["-nostartfiles",
             "-nodefaultlibs",
             "-nostdlib",
             "-static"]
        }

        List<String> getStaticLibraryArchiverArgs() {
            []
        }
    }

    class X86Support implements TargetPlatformConfiguration {
        File srcDir = new File('src')

        boolean supportsPlatform(Platform element) {
            return element.getArchitecture().name == "x86"
        }

        List<String> getCppCompilerArgs() {
            []
        }

        List<String> getObjectiveCppCompilerArgs() {
            []
        }

        List<String> getObjectiveCCompilerArgs() {
		[]
        }

        List<String> getCCompilerArgs() {
            ["-I" + srcDir.getAbsolutePath() + "/arch/x86",
             "-nostdinc",
             "-D__BUILDING_KERNEL",
             "-D__KERNEL_SHELL",
             "-D__KERNEL_DEBUGGING",
             "-D__MEMORY_DEBUGGING",
             "-D__DEBUG_COLLECTIONS",
             "-D__PROCESS_DEBUGGING",
             "-O0",
             "-march=i686",
             "-g3",
             "-gdwarf-4",
             "-pedantic",
             //"-pedantic-errors",
             "-Wall",
             "-Wextra",
             //"-Werror",
             "-c",
             "-fmessage-length=0",
             "-std=gnu99",
             "-fno-builtin",
             "-ffreestanding"]
        }

        List<String> getAssemblerArgs() {
            []
        }

        List<String> getLinkerArgs() {
            []
        }

        List<String> getStaticLibraryArchiverArgs() {
            []
        }
    }

libraries {
    // the core kernel
    base {}
    // architectures
    archX86 {
        targetPlatforms "tinkerX86"
    }
    archArm6 {
        targetPlatforms "tinkerArm"
    }
    archPowerPc {
        targetPlatforms "tinkerPowerPc"
    }
    // the core
    core {}
    boot {}
    api {}
    tinker {}
}

executables {
    armv6Pi {
        targetPlatforms "tinkerArm"
    }
    x86 {
        targetPlatforms "tinkerX86"
    }
    ppc32Gdb {
        targetPlatforms "tinkerPowerPc"
    }
}

sources {
    base {
        c {
            exportedHeaders {
                srcDirs "src", "src/api"
            }
        }
    }
    archX86 {
        c {
            exportedHeaders {
                srcDir "src/arch/x86"
            }
        }
        asm {
            source {
                srcDirs "src/arch/x86"
                include "*.S"
            }
        }
    }
    archPowerPc {
        c {
            lib libraries.base.static
            source {
                srcDirs "src/arch/ppc32"
                include "*.c"
            }
            exportedHeaders {
                srcDir "src/arch/ppc32"
            }
        }
        asm {
            source {
                srcDirs "src/arch/ppc32"
                include "*.S"
            }
        }
    }
    api {
         c {
             lib libraries.base.static
             source {
                 srcDir "src/api"
                 include "**/*.c"
             }
         }
    }
    boot {
         c {
             lib libraries.base.static
             source {
                 srcDir "src/boot"
                 include "**/*.c"
             }
         }
    }
    core {
         c {
             lib libraries.base.static
             source {
                 srcDirs "src/kernel", "src/devices"
                 include "**/*.c"
             }
         }
    }
    tinker {
         c {
             lib libraries.base.static
             source {
                 srcDir "src/tinker"
                 include "**/*.c"
             }
         }
    }
    ppc32Gdb {
        c {
            lib libraries.base.static
            lib libraries.tinker.static
            lib libraries.api.static
            lib libraries.archPowerPc.static
            lib libraries.boot.static
            lib libraries.core.static
            source {
                srcDirs "src/arch/ppc32/gdb_sim", "src/arch/ppc32/generic"
                include "**/*.c"
            }
        }
        binaries.all {
            File srcDir = new File('src')
            linker.args "-lgcc",
                 "-T",
                 (srcDir.getAbsolutePath() + "\\arch\\ppc32\\gdb_sim\\linker.ld")
        }
    }
}