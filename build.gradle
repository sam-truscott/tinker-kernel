apply plugin: 'assembler'
apply plugin: 'c'

model {
    buildTypes {
        debug
        release
    }
    toolChains {
        xgcc(Gcc) {
            target("tinkerPpc") {
                File srcDir = new File("src")
                cppCompiler.executable = "powerpc-eabi-gcc"
                cCompiler.executable = "powerpc-eabi-gcc"
                assembler.executable = "powerpc-eabi-gcc"
                linker.executable = "powerpc-eabi-gcc"
                staticLibArchiver.executable = "powerpc-eabi-ar"
                cCompiler.withArguments { args ->
                    args << "-I" + srcDir.getAbsolutePath() + "/arch/ppc32"
                    args << "-mcpu=powerpc"
                    args << "-DARCH_HAS_MMU"
                    args << "-Wno-maybe-uninitialized"
                }
            }
            target("tinkerArm4Soft") {
                File srcDir = new File("src")
                cppCompiler.executable = "arm-eabi-gcc"
                cCompiler.executable = "arm-eabi-gcc"
                assembler.executable = "arm-eabi-gcc"
                linker.executable = "arm-eabi-gcc"
                staticLibArchiver.executable = "arm-eabi-ar"
                cCompiler.withArguments { args ->
                	args << "-I" + srcDir.getAbsolutePath() + "/arch/arm"
                    args << "-I" + srcDir.getAbsolutePath() + "/arch/arm/arm5"
                    args << "-marm"
                    args << "-DARCH_HAS_MMU"
					args << "-march=armv5"
                }
            }
            target("tinkerArm4HardVfp") {
                File srcDir = new File("src")
                cppCompiler.executable = "arm-eabi-gcc"
                cCompiler.executable = "arm-eabi-gcc"
                assembler.executable = "arm-eabi-gcc"
                linker.executable = "arm-eabi-gcc"
                staticLibArchiver.executable = "arm-eabi-ar"
                cCompiler.withArguments { args ->
                	args << "-I" + srcDir.getAbsolutePath() + "/arch/arm"
                    args << "-I" + srcDir.getAbsolutePath() + "/arch/arm/arm5"
                    args << "-marm"
                    args << "-DARCH_HAS_MMU"
                    args << "-mfpu=vfp"
                    args << "-mfloat-abi=hard"
					args << "-march=armv5"
                }
                linker.withArguments { args ->
                	args << "-mfpu=vfp"
                    args << "-mfloat-abi=hard"
					args << "-march=armv5"
                }
            }
			target("tinkerArm7Soft") {
                File srcDir = new File("src")
                cppCompiler.executable = "arm-eabi-gcc"
                cCompiler.executable = "arm-eabi-gcc"
                assembler.executable = "arm-eabi-gcc"
                linker.executable = "arm-eabi-gcc"
                staticLibArchiver.executable = "arm-eabi-ar"
                cCompiler.withArguments { args ->
                	args << "-I" + srcDir.getAbsolutePath() + "/arch/arm"
                    args << "-I" + srcDir.getAbsolutePath() + "/arch/arm/arm7"
                    args << "-DARCH_HAS_MMU"
					args << "-march=armv7-a"
                }
            }
            target("tinkerArm7HardVfp") {
                File srcDir = new File("src")
                cppCompiler.executable = "arm-eabi-gcc"
                cCompiler.executable = "arm-eabi-gcc"
                assembler.executable = "arm-eabi-gcc"
                linker.executable = "arm-eabi-gcc"
                staticLibArchiver.executable = "arm-eabi-ar"
                cCompiler.withArguments { args ->
                	args << "-I" + srcDir.getAbsolutePath() + "/arch/arm"
                    args << "-I" + srcDir.getAbsolutePath() + "/arch/arm/arm7"
                    args << "-DARCH_HAS_MMU"
                    args << "-mfpu=vfp"
                    args << "-mfloat-abi=hard"
					args << "-march=armv7-a"
                }
                linker.withArguments { args ->
                	args << "-mfpu=vfp"
                    args << "-mfloat-abi=hard"
					args << "-march=armv5"
                }
            }
        }
    }
    platforms {
        tinkerArm4Soft {
            architecture "arm"
        }
        tinkerArm4HardVfp {
            architecture "arm"
        }
		tinkerArm7Soft {
            architecture "arm"
        }
        tinkerArm7HardVfp {
            architecture "arm"
        }
        tinkerPpc {
            architecture "ppc"
        }
    }
    components {
    	// the base (headers)
    	base(NativeLibrarySpec) {
	    	targetPlatform "tinkerArm4Soft"
	    	targetPlatform "tinkerArm4HardVfp"
	    	targetPlatform "tinkerArm7Soft"
	    	targetPlatform "tinkerArm7HardVfp"
	    	targetPlatform "tinkerPpc"
    		sources {
		    	c {
		            exportedHeaders {
		                srcDirs "src", "src/api"
		            }
		        }
	        }
    	}
    	// architectures
	    archArm(NativeLibrarySpec) {
	        targetPlatform "tinkerArm4Soft"
	    	targetPlatform "tinkerArm4HardVfp"
	    	targetPlatform "tinkerArm7Soft"
	    	targetPlatform "tinkerArm7HardVfp"
	        sources {
		        c {
		            lib base.static
		            source {
		                srcDirs "src/arch/arm"
		                include "*.c"
		            }
		            exportedHeaders {
		                srcDir "src/arch/arm"
		            }
		        }
		        asm {
		            source {
		                srcDirs "src/arch/arm"
		                include "*.S"
		            }
		        }
	        }
	    }
	    archPowerPc(NativeLibrarySpec) {
	    	targetPlatform "tinkerPpc"
	        sources {
		        c {
		            lib base.static
		            source {
		                srcDirs "src/arch/ppc32"
		                include "*.c"
		            }
		            exportedHeaders {
		                srcDir "src/arch/ppc32"
		            }
		        }
		        asm {
		            source {
		                srcDirs "src/arch/ppc32"
		                include "*.S"
		            }
		        }
	        }
	    }
	    // the core
	    core(NativeLibrarySpec) {
	    	targetPlatform "tinkerArm4Soft"
	    	targetPlatform "tinkerArm4HardVfp"
	    	targetPlatform "tinkerArm7Soft"
	    	targetPlatform "tinkerArm7HardVfp"
	    	targetPlatform "tinkerPpc"
	    	sources {
			    c {
		             lib base.static
		             source {
		                 srcDirs "src/kernel", "src/tests"
		                 include "**/*.c"
		             }
		        }
	        }
	    }
	    // drivers
	    driverIntcBcm2835(NativeLibrarySpec) {
	    	targetPlatform "tinkerArm4Soft"
	    	targetPlatform "tinkerArm4HardVfp"
	    	targetPlatform "tinkerArm7Soft"
	    	targetPlatform "tinkerArm7HardVfp"
	    	sources {
		    	c {
		    		lib base.static
		    		source {
		                 srcDirs "src/devices/intc/bcm2835"
		                 include "**/*.c"
		             }
		    	}
	    	}
	    }
	    driverTimerBcm2835(NativeLibrarySpec) {
	    	targetPlatform "tinkerArm4Soft"
	    	targetPlatform "tinkerArm4HardVfp"
	    	targetPlatform "tinkerArm7Soft"
	    	targetPlatform "tinkerArm7HardVfp"
	    	sources {
		    	c {
		    		lib base.static
		    		source {
		                 srcDirs "src/devices/timer/bcm2835"
		                 include "**/*.c"
		             }
		    	}
	    	}
	    }
	    driverTimerPpc32tbr(NativeLibrarySpec) {
	    	targetPlatform "tinkerPpc"
	    	sources {
		    	c {
		    		lib base.static
		    		source {
		                 srcDirs "src/devices/timer/ppc32tbr"
		                 include "**/*.c"
		             }
		    	}
	    	}
	    }
	    driverSerialUart16550(NativeLibrarySpec) {
	    	targetPlatform "tinkerPpc"
	    	sources {
			    c {
					lib base.static
					source {
			             srcDirs "src/devices/serial/uart16550"
			             include "**/*.c"
			         }
				}
			}
	    }
	    driverSerialBcm2835(NativeLibrarySpec) {
	    	targetPlatform "tinkerArm4Soft"
	    	targetPlatform "tinkerArm4HardVfp"
	    	targetPlatform "tinkerArm7Soft"
	    	targetPlatform "tinkerArm7HardVfp"
	    	sources {
		    	c {
		    		lib base.static
		    		source {
		                 srcDirs "src/devices/serial/bcm2835"
		                 include "**/*.c"
		             }
		    	}
	    	}
	    }
	    // low-level
	    boot(NativeLibrarySpec) {
	    	targetPlatform "tinkerArm4Soft"
	    	targetPlatform "tinkerArm4HardVfp"
	    	targetPlatform "tinkerArm7Soft"
	    	targetPlatform "tinkerArm7HardVfp"
	    	targetPlatform "tinkerPpc"
	    	sources {
			    c {
		             lib base.static
		             source {
		                 srcDir "src/boot"
		                 include "**/*.c"
		             }
		         }
	         }
	    }
	    // api
	    api(NativeLibrarySpec) {
	    	targetPlatform "tinkerArm4Soft"
	    	targetPlatform "tinkerArm4HardVfp"
	    	targetPlatform "tinkerArm7Soft"
	    	targetPlatform "tinkerArm7HardVfp"
	    	targetPlatform "tinkerPpc"
	    	sources {
			    c {
		             lib base.static
		             source {
		                 srcDir "src/api"
		                 include "**/*.c"
		             }
		         }
	         }
	    }
	    armRaspPi(NativeExecutableSpec) {
	    	targetPlatform "tinkerArm4HardVfp"
	        binaries.all {
	            File srcDir = new File('src')
	            linker.args "-lgcc",
	                 "-T",
	                 (srcDir.getAbsolutePath() + "/arch/arm/pi/linker.ld")
	        }
	        sources {
		        c {
		            lib driverTimerBcm2835.static
		            lib driverSerialBcm2835.static
		            lib driverIntcBcm2835.static
		            lib boot.static        // boot c code into kernel
		            lib core.static        // the core kernel
		            lib archArm.static     // generic arm code
		            lib api.static         // api layer
		            lib base.static        // base headers
		            source {
		                srcDirs "src/arch/arm/pi"
		                include "**/*.c"
		            }
		        }
		        asm {
		        	source {
		        		srcDirs "src/arch/arm/pi"
		        		include "**/*.S"
		        	}
		        }
	        }
	    }
		armRaspPi2(NativeExecutableSpec) {
	    	targetPlatform "tinkerArm7HardVfp"
	        binaries.all {
	            File srcDir = new File('src')
	            linker.args "-lgcc",
	                 "-T",
	                 (srcDir.getAbsolutePath() + "/arch/arm/pi/linker.ld")
	        }
	        sources {
		        c {
		            lib driverTimerBcm2835.static
		            lib driverSerialBcm2835.static
		            lib driverIntcBcm2835.static
		            lib boot.static        // boot c code into kernel
		            lib core.static        // the core kernel
		            lib archArm.static     // generic arm code
		            lib api.static         // api layer
		            lib base.static        // base headers
		            source {
		                srcDirs "src/arch/arm/pi"
		                include "**/*.c"
		            }
		        }
		        asm {
		        	source {
		        		srcDirs "src/arch/arm/pi"
		        		include "**/*.S"
		        	}
		        }
	        }
	    }
//	    ppc32Gdb(NativeExecutableSpec) {
//	        targetPlatform "tinkerPpc"
//	        binaries.all {
//	            File srcDir = new File('src')
//	            linker.args "-lgcc",
//	                 "-T",
//	                 (srcDir.getAbsolutePath() + "\\arch\\ppc32\\gdb_sim\\linker.ld")
//	        }
//	        sources {
//		        c {
//		            lib base.static        // base headers
//		            lib api.static         // api layer
//		            lib archPowerPc.static // powerpc code
//		            lib boot.static        // boot c code into kernel
//		            lib core.static        // the core kernel
//		            lib driverSerialUart16550.static
//		            lib driverTimerPpc32tbr.static
//		            lib driverTimerOpic.static
//		            lib driverIntcOpic.static
//		            source {
//		                srcDirs "src/arch/ppc32/gdb_sim", "src/arch/ppc32/generic"
//		                include "**/*.c"
//		            }
//		        }
//	        }
//	    }
	    
	    binaries.all {
	    	cCompiler.args "-pedantic",
	            "-pedantic-errors",
	            "-Wall",
	            "-Wextra",
	            "-Werror",
	            "-c",
	            "-fmessage-length=0",
	            "-std=gnu11",
	            "-fno-builtin",
	            "-fpic",
	            "-ffreestanding",
	            "-DBUILDING_KERNEL"
	        linker.args "-nostartfiles",
		        "-nodefaultlibs",
		        "-nostdlib",
		        "-static"
	        if (buildType == buildTypes.debug) {
	            cCompiler.args "-O0", 
	                "-g3",
	                "-gdwarf-4",
	                "-DKERNEL_SHELL",
	                "-DUNIT_TESTS",
	                "-UTIMER_DEBUGGING",
	                "-UINTC_DEBUGGING",
	                "-DKERNEL_DEBUGGING",
	                "-UMEMORY_DEBUGGING",
	                "-DDEBUG_COLLECTIONS",
	                "-UPROCESS_DEBUGGING",
	                "-USHM_DEBUGGING",
	                "-UTARGET_DEBUGGING",
	                "-USYSCALL_DEBUGGING",
	                "-UALARM_DEBUGGING",
	                "-UREGISTRY_DEBUGGING",
	                "-UPIPE_DEBUGGING",
	                "-UPIPE_TRACING",
	                "-UIDLE_DEBUGGING",
	                "-UKERNEL_SHELL_DEBUG",
	                "-ULOCK_DEBUGGING",
	                "-ULOCK_TRACING"
	        } else if (buildType == buildTypes.release) {
	            cCompiler.args "-Os",
	                "-g0",
	                "-UKERNEL_DEBUGGING",
	                "-DKERNEL_SHELL",
	                "-UKERNEL_SHELL_DEBUG"
	            linker.args "-s"
	        }
	    }
    }
}


binaries.withType(SharedLibraryBinary) {
     buildable false
}

task debugPiBinary(type:Exec) {
  dependsOn binaries.withType(NativeExecutableBinary).matching {
    it.buildable && it.component.name.equals("armRaspPi") && it.buildType.equals(buildTypes.debug)
  }
  commandLine 'arm-eabi-objcopy', '-O', 'binary', 'build/binaries/armRaspPiExecutable/debug/armRaspPi.exe', 'build/binaries/armRaspPiExecutable/debug/kernel.img'
  standardOutput = new ByteArrayOutputStream()
  ext.output = {
    return standardOutput.toString()
  }
}

task releasePiBinary(type:Exec) {
  dependsOn binaries.withType(NativeExecutableBinary).matching {
    it.buildable && it.component.name.equals("armRaspPi") && it.buildType.equals(buildTypes.release)
  }
  commandLine 'arm-eabi-objcopy', '-O', 'binary', 'build/binaries/armRaspPiExecutable/release/armRaspPi.exe', 'build/binaries/armRaspPiExecutable/release/kernel.img'
  standardOutput = new ByteArrayOutputStream()
  ext.output = {
    return standardOutput.toString()
  }
}

task debugPi2Binary(type:Exec) {
  dependsOn binaries.withType(NativeExecutableBinary).matching {
    it.buildable && it.component.name.equals("armRaspPi2") && it.buildType.equals(buildTypes.debug)
  }
  commandLine 'arm-eabi-objcopy', '-O', 'binary', 'build/binaries/armRaspPi2Executable/debug/armRaspPi2.exe', 'build/binaries/armRaspPi2Executable/debug/kernel.img'
  standardOutput = new ByteArrayOutputStream()
  ext.output = {
    return standardOutput.toString()
  }
}

task releasePi2Binary(type:Exec) {
  dependsOn binaries.withType(NativeExecutableBinary).matching {
    it.buildable && it.component.name.equals("armRaspPi2") && it.buildType.equals(buildTypes.release)
  }
  commandLine 'arm-eabi-objcopy', '-O', 'binary', 'build/binaries/armRaspPi2Executable/release/armRaspPi2.exe', 'build/binaries/armRaspPi2Executable/release/kernel.img'
  standardOutput = new ByteArrayOutputStream()
  ext.output = {
    return standardOutput.toString()
  }
}