apply plugin: 'assembler'
apply plugin: 'c'

model {
    buildTypes {
        debug
        release
    }
    toolChains {
        xgcc(Gcc) {
            target("tinkerPpc") {
                File srcDir = new File("src")
                cppCompiler.executable = "powerpc-eabi-gcc"
                cCompiler.executable = "powerpc-eabi-gcc"
                assembler.executable = "powerpc-eabi-as"
                linker.executable = "powerpc-eabi-gcc"
                staticLibArchiver.executable = "powerpc-eabi-ar"
                cCompiler.withArguments { args ->
                    args << "-I" + srcDir.getAbsolutePath() + "/arch/ppc32"
                    args << "-mcpu=powerpc"
                }
            }
            target("tinkerX86") {
                File srcDir = new File("src")
                cppCompiler.executable = "i686-elf-gcc"
                cCompiler.executable = "i686-elf-gcc"
                assembler.executable = "i686-elf-as"
                linker.executable = "i686-elf-gcc"
                staticLibArchiver.executable = "i686-elf-ar"
                cCompiler.withArguments { args ->
                    args << "-I" + srcDir.getAbsolutePath() + "/arch/x86"
                    args << "-march=i686"
                }
            }
            target("tinkerArmSoft") {
                File srcDir = new File("src")
                cppCompiler.executable = "arm-eabi-gcc"
                cCompiler.executable = "arm-eabi-gcc"
                assembler.executable = "arm-eabi-as"
                linker.executable = "arm-eabi-gcc"
                staticLibArchiver.executable = "arm-eabi-ar"
                cCompiler.withArguments { args ->
                    args << "-I" + srcDir.getAbsolutePath() + "/arch/arm"
                    args << "-fpic"
                }
            }
            target("tinkerArmHardVfp") {
                File srcDir = new File("src")
                cppCompiler.executable = "arm-eabi-gcc"
                cCompiler.executable = "arm-eabi-gcc"
                assembler.executable = "arm-eabi-as"
                linker.executable = "arm-eabi-gcc"
                staticLibArchiver.executable = "arm-eabi-ar"
                cCompiler.withArguments { args ->
                    args << "-I" + srcDir.getAbsolutePath() + "/arch/arm"
                    args << "-mfpu=vfp"
                    args << "-mfloat-abi=hard"
                    args << "-fpic"
                }
                linker.withArguments { args ->
                	args << "-mfpu=vfp"
                    args << "-mfloat-abi=hard"
                }
            }
        }
    }
    platforms {
        tinkerArmSoft {
            architecture "arm"
        }
        tinkerArmHardVfp {
            architecture "arm"
        }
        tinkerPpc {
            architecture "ppc"
        }
        tinkerX86 {
            architecture "x86"
        }
    }
}

libraries {
    // the base (headers)
    base {}
    // architectures
    archX86 {
        targetPlatforms "tinkerX86"
    }
    archArm {
        targetPlatforms "tinkerArmSoft", "tinkerArmHardVfp"
    }
    archPowerPc {
        targetPlatforms "tinkerPpc"
    }
    // the core
    core {}
    // drivers
    driverIntcOpic {
    	targetPlatforms "tinkerPpc"
    }
    driverIntcBcm2835 {
    	targetPlatforms "tinkerArmSoft", "tinkerArmHardVfp"
    }
    driverTimerBcm2835 {
    	targetPlatforms "tinkerArmSoft", "tinkerArmHardVfp"
    }
    driverTimerOpic {
    	targetPlatforms "tinkerPpc"
    }
    driverTimerPpc32tbr {
    	targetPlatforms "tinkerPpc"
    }
    driverSerialUart16550 {}
    driverSerialBcm2835 {
    	targetPlatforms "tinkerArmSoft", "tinkerArmHardVfp"
    }
    // low-level
    boot {}
    // api
    api {}
}

executables {
    armRaspPi {
        targetPlatforms "tinkerArmHardVfp"
        //targetPlatforms "tinkerArmSoft"
        binaries.all {
            File srcDir = new File('src')
            linker.args "-lgcc",
                 "-T",
                 (srcDir.getAbsolutePath() + "\\arch\\arm\\pi\\linker.ld")
        }
    }
    x86 {
        targetPlatforms "tinkerX86"
        binaries.all {
            File srcDir = new File('src')
            linker.args "-lgcc",
                 "-T",
                 (srcDir.getAbsolutePath() + "\\arch\\x86\\linker.ld")
        }
    }
    ppc32Gdb {
        targetPlatforms "tinkerPpc"
        binaries.all {
            File srcDir = new File('src')
            linker.args "-lgcc",
                 "-T",
                 (srcDir.getAbsolutePath() + "\\arch\\ppc32\\gdb_sim\\linker.ld")
        }
    }
}

sources {
    base {
        c {
            exportedHeaders {
                srcDirs "src", "src/api"
            }
        }
    }
    archX86 {
        c {
            lib libraries.base.static
            exportedHeaders {
                srcDir "src/arch/x86"
            }
        }
        asm {
            source {
                srcDirs "src/arch/x86"
                include "*.S"
            }
        }
    }
    archPowerPc {
        c {
            lib libraries.base.static
            source {
                srcDirs "src/arch/ppc32"
                include "*.c"
            }
            exportedHeaders {
                srcDir "src/arch/ppc32"
            }
        }
        asm {
            source {
                srcDirs "src/arch/ppc32"
                include "*.S"
            }
        }
    }
    archArm {
        c {
            lib libraries.base.static
            source {
                srcDirs "src/arch/arm"
                include "*.c"
            }
            exportedHeaders {
                srcDir "src/arch/arm"
            }
        }
        asm {
            source {
                srcDirs "src/arch/arm"
                include "*.S"
            }
        }
    }
    api {
         c {
             lib libraries.base.static
             source {
                 srcDir "src/api"
                 include "**/*.c"
             }
         }
    }
    boot {
         c {
             lib libraries.base.static
             source {
                 srcDir "src/boot"
                 include "**/*.c"
             }
         }
    }
    driverIntcOpic {
    	c {
    		lib libraries.base.static
    		source {
                 srcDirs "src/devices/intc/opic"
                 include "**/*.c"
             }
    	}
    }
    driverIntcBcm2835 {
    	c {
    		lib libraries.base.static
    		source {
                 srcDirs "src/devices/intc/bcm2835"
                 include "**/*.c"
             }
    	}
    }
    driverTimerBcm2835 {
    	c {
    		lib libraries.base.static
    		source {
                 srcDirs "src/devices/timer/bcm2835"
                 include "**/*.c"
             }
    	}
    }
    driverTimerOpic {
    	c {
    		lib libraries.base.static
    		source {
                 srcDirs "src/devices/timer/opic"
                 include "**/*.c"
             }
    	}
    }
    driverTimerPpc32tbr {
    	c {
    		lib libraries.base.static
    		source {
                 srcDirs "src/devices/timer/ppc32tbr"
                 include "**/*.c"
             }
    	}
    }
    driverSerialUart16550 {
    	c {
    		lib libraries.base.static
    		source {
                 srcDirs "src/devices/serial/uart16550"
                 include "**/*.c"
             }
    	}
    }
    driverSerialBcm2835 {
    	c {
    		lib libraries.base.static
    		source {
                 srcDirs "src/devices/serial/bcm2835"
                 include "**/*.c"
             }
    	}
    }
    core {
         c {
             lib libraries.base.static
             source {
                 srcDirs "src/kernel"
                 include "**/*.c"
             }
         }
    }
    ppc32Gdb {
        c {
            lib libraries.base.static        // base headers
            lib libraries.api.static         // api layer
            lib libraries.archPowerPc.static // powerpc code
            lib libraries.boot.static        // boot c code into kernel
            lib libraries.core.static        // the core kernel
            lib libraries.driverSerialUart16550.static
            lib libraries.driverTimerPpc32tbr.static
            lib libraries.driverTimerOpic.static
            lib libraries.driverIntcOpic.static
            source {
                srcDirs "src/arch/ppc32/gdb_sim", "src/arch/ppc32/generic", "src/tinker"
                include "**/*.c"
            }
        }
    }
    armRaspPi {
        c {
            lib libraries.base.static        // base headers
            lib libraries.api.static         // api layer
            lib libraries.archArm.static     // generic arm code
            lib libraries.boot.static        // boot c code into kernel
            lib libraries.core.static        // the core kernel
            lib libraries.driverTimerBcm2835.static
            lib libraries.driverSerialBcm2835.static
            lib libraries.driverIntcBcm2835.static
            source {
                srcDirs "src/arch/arm/pi", "src/tinker"
                include "**/*.c"
            }
        }
        asm {
        	source {
        		srcDirs "src/arch/arm/pi"
        		include "**/*.S"
        	}
        }  
    }
    x86 {
        c {
            lib libraries.base.static    // base headers
            lib libraries.api.static     // api layer
            lib libraries.archX86.static // x86 code
            lib libraries.boot.static    // boot c code into kernel
            lib libraries.core.static    // the core kernel
            source {
                srcDirs "src/tinker", "src/arch/x86"
                include "**/*.c"
            }
        }
    }
    binaries.all {
    	cCompiler.args "-Wno-maybe-uninitialized",
            //"-nostdinc", -- shouldn't be used anymore as we're freestanding
            "-pedantic",
            "-pedantic-errors",
            "-Wall",
            "-Wextra",
            "-Werror",
            "-c",
            "-fmessage-length=0",
            "-std=gnu11",
            "-fno-builtin",
            "-ffreestanding",
            "-MD",
            "-MP"
        linker.args "-nostartfiles",
	        "-nodefaultlibs",
	        "-nostdlib",
	        "-static"
        if (buildType == buildTypes.debug) {
            cCompiler.args "-O0", 
                "-g3",
                "-gdwarf-4",
                "-DBUILDING_KERNEL",
                "-DKERNEL_SHELL",
                "-UTIMER_DEBUGGING",
                "-DINTC_DEBUGGING",
                "-DKERNEL_DEBUGGING",
                "-UMEMORY_DEBUGGING",
                "-UDEBUG_COLLECTIONS",
                "-DPROCESS_DEBUGGING"
        } else if (buildType == buildTypes.release) {
            cCompiler.args "-Ofast",
                "-g0"
            linker.args "-s",
                "-lgcc"
        }
    }
}

binaries.withType(SharedLibraryBinary) {
     buildable false
 }