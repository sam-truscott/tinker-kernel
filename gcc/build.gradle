apply plugin: 'assembler'
apply plugin: 'c'

task downloadGcc(type: Downloader) {
    sourceUrl = 'ftp://ftp.mirrorservice.org/sites/sourceware.org/pub/gcc/releases/gcc-7.2.0/gcc-7.2.0.tar.gz'
    target = file('gcc-7.2.0.tar.bz2')
}

task untarGcc (type: Copy) {
    from tarTree(resources.gzip('gcc-7.2.0.tar.bz2'))
    into getProjectDir().getAbsolutePath()  + "//src"
}

untarGcc.dependsOn downloadGcc

task setupGccStage1 (type: BuildSetup) {
    root = getProjectDir().getAbsolutePath()
    target = 'arm-eabi-stage1'
}

setupGccStage1.dependsOn untarGcc

task configureGccStage1Arm (type:Exec) {
  workingDir getProjectDir().getAbsolutePath() + "//build-arm-eabi-stage1"
  commandLine 'bash',
    '-c',
    'rm -rf *;../src/gcc-7.2.0/configure --with-system-zlib --prefix=' + getProjectDir().getAbsolutePath().replace("\\","/") + '/../arm-eabi --target=arm-eabi --enable-multilib --enable-lto --disable-libstdcxx --disable-libquadmath --disable-nls --enable-languages=c --without-headers --with-newlib --disable-libssp --disable-gomp --disable-libstcxx-pch --enable-threads --disable-libmudflap --enable-interwork'
}

configureGccStage1Arm.dependsOn setupGccStage1

task makeGccStage1Arm (type:Exec) {
    workingDir getProjectDir().getAbsolutePath() + "//build-arm-eabi-stage1"
    commandLine 'bash',
        '-c',
        'make all-gcc -j4'
}

makeGccStage1Arm.dependsOn configureGccStage1Arm

task makeInstallGccStage1Arm (type:Exec) {
    workingDir getProjectDir().getAbsolutePath() + "//build-arm-eabi-stage1"
    commandLine 'bash',
        '-c',
        'make install-gcc'
}

makeInstallGccStage1Arm.dependsOn makeGccStage1Arm

task setupGccStage3 (type: BuildSetup) {
    root = getProjectDir().getAbsolutePath()
    target = 'arm-eabi-stage3'
}

setupGccStage3.dependsOn untarGcc

task configureGccStage3Arm (type:Exec) {
  workingDir getProjectDir().getAbsolutePath() + "//build-arm-eabi-stage3"
  commandLine 'bash',
    '-c',
    'rm -rf *;../src/gcc-7.2.0/configure --with-system-zlib --prefix=' + getProjectDir().getAbsolutePath().replace("\\","/") + '/../arm-eabi --target=arm-eabi --enable-multilib --enable-lto --disable-libquadmath --disable-nls --enable-languages=c,c++ --with-newlib --disable-libssp --disable-gomp --disable-libstcxx-pch --enable-threads --disable-libmudflap --enable-interwork'
}

configureGccStage3Arm.dependsOn setupGccStage3

task makeGccStage3Arm (type:Exec) {
    workingDir getProjectDir().getAbsolutePath() + "//build-arm-eabi-stage3"
    commandLine 'bash',
        '-c',
        'make all -j4'
}

makeGccStage3Arm.dependsOn configureGccStage3Arm

task makeInstallGccStage3Arm (type:Exec) {
    workingDir getProjectDir().getAbsolutePath() + "//build-arm-eabi-stage3"
    commandLine 'bash',
        '-c',
        'make install'
}

makeInstallGccStage3Arm.dependsOn makeGccStage3Arm

task weaveApiArm (type:Exec, dependsOn: [
    ':api:apiTinkerArm4SoftDebugStaticLibrary', 
    ':archArm:archArmTinkerArm4SoftDebugStaticLibrary']) {
    workingDir getProjectDir().getAbsolutePath()
    commandLine 'bash',
        '-c',
        'mkdir -p tmp;\
        cd tmp;\
        arm-eabi-ar x ../../arm-eabi/arm-eabi//lib/libc.a;\
        arm-eabi-ar x ../../api/build/libs/api/static/tinkerArm4Soft/debug/*;\
        arm-eabi-ar x ../../archArm/build/libs/archArm/static/tinkerArm4Soft/debug/*;\
        arm-eabi-ar q ../../arm-eabi/arm-eabi/lib/libc.a *.o*;\
        rm -rf tmp;\
        cp ../../api/src/api/headers/*.h ../../arm-eabi/arm-eabi/include/;\
        cp ../../base/src/base/headers/*.h ../../arm-eabi/arm-eabi/include/;\
        cp ../../archArm/src/archArm/headers/tgt_mem.h ../../arm-eabi/arm-eabi/include/;\
        cp ../../archArm/src/archArm/headers/arm5/tgt_io.h ../../arm-eabi/arm-eabi/include/;'
}

task cleanGcc(type:Exec) {
	commandLine 'bash',
		'-c',
		'rm -rf build-arm-eabi*;\
		 rm -rf src;\
		 rm -rf *.tar.bz2'
}

cleanGcc.outputs.upToDateWhen {false}
clean.finalizedBy(cleanGcc)

class Downloader extends DefaultTask {
    @Input
    String sourceUrl

    @OutputFile
    File target

    @TaskAction
    void download() {
        ant.get(src: sourceUrl, dest: target)
    }
}

class BuildSetup extends DefaultTask {
    @Input
    String root
    @Input
    String target

    @TaskAction
    void setup() {
        java.io.File path = new File(root + "//build-" + target)
        path.mkdirs();
    }
}
