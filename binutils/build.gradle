apply plugin: 'assembler'
apply plugin: 'c'

task downloadBinutils(type: Downloader) {
    sourceUrl = 'http://ftp.gnu.org/gnu/binutils/binutils-2.35.tar.gz'
    target = file('binutils-2.35.tar.gz')
}

task untarBinutils (type: Copy) {
    from tarTree(resources.gzip('binutils-2.35.tar.gz'))
    into getProjectDir().getAbsolutePath()  + "//src"
}

untarBinutils.dependsOn downloadBinutils

task setupBinutilsArm (type: BuildSetup) {
    root = getProjectDir().getAbsolutePath()
    target = 'arm-eabi'
}

setupBinutilsArm.dependsOn untarBinutils

task configureBinutilsArm (type:Exec) {
  workingDir getProjectDir().getAbsolutePath() + "//build-arm-eabi"
  commandLine 'bash',
    '-c',
    'rm -rf *;../src/binutils-2.35/configure --prefix=' + getProjectDir().getAbsolutePath().replace("\\","/") + '/../arm-eabi --target=arm-eabi --enable-multilib --enable-lto --disable-libstdcxx --disable-libquadmath --disable-nls --enable-interwork'
}

configureBinutilsArm.dependsOn setupBinutilsArm

task makeBinutilsArm (type:Exec) {
    workingDir getProjectDir().getAbsolutePath() + "//build-arm-eabi"
    commandLine 'bash',
        '-c',
        project.getProperties().get("MAKE") + ' -' + project.getProperties().get("CONBUILDS")
}

makeBinutilsArm.dependsOn configureBinutilsArm

task makeInstallBintutilsArm (type:Exec) {
    workingDir getProjectDir().getAbsolutePath() + "//build-arm-eabi"
    commandLine 'bash',
        '-c',
        project.getProperties().get("MAKE") + ' install'
}

makeInstallBintutilsArm.dependsOn makeBinutilsArm

task cleanBinUtils(type:Exec) {
	commandLine 'bash',
		'-c',
		'rm -rf build-arm-eabi;\
		 rm -rf src;\
		 rm -rf *.tar.gz'
}

cleanBinUtils.outputs.upToDateWhen {false}
clean.finalizedBy(cleanBinUtils)

class Downloader extends DefaultTask {
    @Input
    String sourceUrl

    @OutputFile
    File target

    @TaskAction
    void download() {
        ant.get(src: sourceUrl, dest: target)
    }
}

class BuildSetup extends DefaultTask {
    @Input
    String root
    @Input
    String target

    @TaskAction
    void setup() {
        java.io.File path = new File(root + "//build-" + target)
        path.mkdirs();
    }
}
